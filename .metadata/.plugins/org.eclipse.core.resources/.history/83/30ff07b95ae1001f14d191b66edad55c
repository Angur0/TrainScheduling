package MRT3Simulation;
 
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.sql.*;
import java.util.regex.Pattern;
 
public class MRT3SimulationApp {
 
    private static final String URL = "jdbc:sqlite:mrt3_schedule.db";
    private DefaultTableModel tableModel;
    private JTable table;
    private int currentIndex = 0; // For traversing schedules
 
    @SuppressWarnings("serial")
    public MRT3SimulationApp() {
        // Ensure the table exists in the database
        createTable();
 
        // Initialize the table model with non-editable cells
        tableModel = new DefaultTableModel(new String[]{"Arrivals", "Departures", "Train ID", "Arrival Time", "Departure Time", "Remarks"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // All cells are non-editable
            }
        };
        loadDataFromDatabase();
    }
 
    private void createTable() {
        String sql = "CREATE TABLE IF NOT EXISTS mrt3_schedules (\n"
                   + " id INTEGER PRIMARY KEY AUTOINCREMENT,\n"
                   + " arrivals TEXT NOT NULL,\n"
                   + " departures TEXT NOT NULL,\n"
                   + " train_id TEXT NOT NULL,\n"
                   + " arrival_time TEXT NOT NULL,\n"
                   + " departure_time TEXT NOT NULL,\n"
                   + " remarks TEXT\n"
                   + ");";
 
        try (Connection connection = DriverManager.getConnection(URL);
             Statement statement = connection.createStatement()) {
 
            statement.execute(sql);
            System.out.println("Table created successfully.");
 
        } catch (SQLException e) {
            System.out.println("Error creating table: " + e.getMessage());
        }
    }
 
    private void loadDataFromDatabase() {
        try (Connection connection = DriverManager.getConnection(URL);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM mrt3_schedules")) {
 
            // Clear existing data
            tableModel.setRowCount(0);
 
            // Load data from the database
            while (resultSet.next()) {
                String arrivals = resultSet.getString("arrivals");
                String departures = resultSet.getString("departures");
                String trainId = resultSet.getString("train_id");
                String arrivalTime = resultSet.getString("arrival_time");
                String departureTime = resultSet.getString("departure_time");
                String remarks = resultSet.getString("remarks");
                tableModel.addRow(new Object[]{arrivals, departures, trainId, arrivalTime, departureTime, remarks});
            }
 
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
    private void saveDataToDatabase(String arrivals, String departures, String trainId, String arrivalTime, String departureTime, String remarks) {
        String sql = "INSERT INTO mrt3_schedules(arrivals, departures, train_id, arrival_time, departure_time, remarks) VALUES(?,?,?,?,?,?)";
 
        try (Connection connection = DriverManager.getConnection(URL);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
 
            preparedStatement.setString(1, arrivals);
            preparedStatement.setString(2, departures);
            preparedStatement.setString(3, trainId);
            preparedStatement.setString(4, arrivalTime);
            preparedStatement.setString(5, departureTime);
            preparedStatement.setString(6, remarks);
            preparedStatement.executeUpdate();
 
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
    private void deleteDataFromDatabase(int id) {
        String sql = "DELETE FROM mrt3_schedules WHERE id = ?";
 
        try (Connection connection = DriverManager.getConnection(URL);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
 
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
 
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
    private void updateDataInDatabase(int id, String arrivals, String departures, String trainId, String arrivalTime, String departureTime, String remarks) {
        String sql = "UPDATE mrt3_schedules SET arrivals = ?, departures = ?, train_id = ?, arrival_time = ?, departure_time = ?, remarks = ? WHERE id = ?";
 
        try (Connection connection = DriverManager.getConnection(URL);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
 
            preparedStatement.setString(1, arrivals);
            preparedStatement.setString(2, departures);
            preparedStatement.setString(3, trainId);
            preparedStatement.setString(4, arrivalTime);
            preparedStatement.setString(5, departureTime);
            preparedStatement.setString(6, remarks);
            preparedStatement.setInt(7, id);
            preparedStatement.executeUpdate();
 
            System.out.println("Schedule updated successfully!");
 
        } catch (SQLException e) {
            System.out.println("Error updating schedule: " + e.getMessage());
        }
    }
 
    // Helper method to validate time input in HH:MM format
    private String getValidatedTimeInput(JFrame frame, String currentTime) {
        String timePattern = "^(?:[01]?[0-9]|2[0-3]):[0-5][0-9]$"; // Regular expression for HH:MM format
        String time = JOptionPane.showInputDialog(frame, "Enter Time (HH:MM):", currentTime);
 
        // Check if the time is valid and matches the pattern
        while (time != null && !time.matches(timePattern)) {
            JOptionPane.showMessageDialog(frame, "Invalid time format. Please enter in HH:MM format (00:00 - 23:59).", "Error", 
                                          JOptionPane.ERROR_MESSAGE);
            time = JOptionPane.showInputDialog(frame, "Enter Time (HH:MM):", currentTime);
        }
 
        return time;
    }
 
    private void filterTable(String query) {
        // Ensure the table has a RowSorter
        if (table.getRowSorter() == null) {
            table.setRowSorter(new TableRowSorter<>(tableModel));
        }
 
        // Use a regex to match either arrivals or departures
        String regex = "(?i)" + Pattern.quote(query); // Case-insensitive search
        RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(regex, 0, 1); // Filter by Arrivals (column 0) and Departures (column 1)
        ((TableRowSorter<DefaultTableModel>) table.getRowSorter()).setRowFilter(rowFilter);
    }
 
    private void sortTable(String sortBy, String order) {
        // Ensure the table has a RowSorter
        if (table.getRowSorter() == null) {
            table.setRowSorter(new TableRowSorter<>(tableModel));
        }
 
        DefaultRowSorter<DefaultTableModel, ?> sorter = (DefaultRowSorter<DefaultTableModel, ?>) table.getRowSorter();
        sorter.setSortKeys(null); // Clear existing sort keys
 
        if (!sortBy.equals("Clear Sort")) {
            int columnIndex = sortBy.equals("Arrival Time") ? 3 : 4; // Column index for arrival or departure time
            SortOrder sortOrder = order.equals("Ascending") ? SortOrder.ASCENDING : SortOrder.DESCENDING;
            sorter.setSortKeys(java.util.List.of(new RowSorter.SortKey(columnIndex, sortOrder)));
        }
    }
 
    public static void main(String[] args) {
        MRT3SimulationApp app = new MRT3SimulationApp();
 
        // Create the main frame
        JFrame frame = new JFrame("MRT-3 Train Scheduling Simulation");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 500);
 
        // Use BorderLayout for dynamic resizing
        frame.setLayout(new BorderLayout());
 
        // Create a panel to hold the table
        JPanel panel = new JPanel(new BorderLayout());
        frame.add(panel, BorderLayout.CENTER);
 
        // Create a JTable with the table model
        app.table = new JTable(app.tableModel);
 
        // Disable column reordering
        app.table.getTableHeader().setReorderingAllowed(false);
 
        // Disable column resizing
        app.table.getTableHeader().setResizingAllowed(false);
 
        // Add the table to a scroll pane (to enable scrolling)
        JScrollPane scrollPane = new JScrollPane(app.table);
        panel.add(scrollPane, BorderLayout.CENTER);
 
        // Create a search bar with placeholder text
        JTextField searchBar = new JTextField(20); // Set preferred width
        searchBar.setText("Search by Arrivals or Departures"); // Placeholder text
        searchBar.setForeground(Color.GRAY); // Set placeholder text color
        searchBar.setFont(searchBar.getFont().deriveFont(Font.ITALIC)); // Italicize placeholder text
 
        // Add focus listeners to handle placeholder text
        searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (searchBar.getText().equals("Search by Arrivals or Departures")) {
                    searchBar.setText("");
                    searchBar.setForeground(Color.BLACK); // Set text color to black when typing
                    searchBar.setFont(searchBar.getFont().deriveFont(Font.PLAIN)); // Remove italic when typing
                }
            }
 
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (searchBar.getText().isEmpty()) {
                    searchBar.setText("Search by Arrivals or Departures");
                    searchBar.setForeground(Color.GRAY); // Set placeholder text color
                    searchBar.setFont(searchBar.getFont().deriveFont(Font.ITALIC)); // Italicize placeholder text
                    app.filterTable(""); // Restore original table data when focus is lost
                }
            }
        });
 
        // Add a document listener to filter the table dynamically
        searchBar.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                app.filterTable(searchBar.getText());
            }
 
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                app.filterTable(searchBar.getText());
            }
 
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                app.filterTable(searchBar.getText());
            }
        });
 
        // Create the sort dropdown with placeholder text
        JComboBox<String> sortDropdown = new JComboBox<>(new String[]{"Arrival Time Ascending", "Arrival Time Descending", "Departure Time Ascending", "Departure Time Descending", "Clear Sort"});
        sortDropdown.setSelectedIndex(-1); // No option selected by default
 
        // Set the preferred size of the dropdown
        sortDropdown.setPreferredSize(new Dimension(190, 20));
 
        // Set a custom renderer to display "Sort by" as placeholder text
        sortDropdown.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (index == -1 && sortDropdown.getSelectedIndex() == -1) {
                    // Display "Sort by" as placeholder text when no option is selected
                    return super.getListCellRendererComponent(list, "Sort by", index, isSelected, cellHasFocus);
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });
 
        // Add an action listener to handle sorting and resetting the dropdown text
        sortDropdown.addActionListener(e -> {
            String selectedItem = (String) sortDropdown.getSelectedItem();
            if (selectedItem != null) {
                if (selectedItem.equals("Clear Sort")) {
                    // Reset the dropdown to display "Sort by"
                    sortDropdown.setSelectedIndex(-1);
                    app.sortTable("Clear Sort", ""); // Clear the sorting
                } else {
                    // Extract the sort criteria and order
                    String[] parts = selectedItem.split(" ");
                    if (parts.length >= 3) {
                        String sortBy = parts[0] + " " + parts[1]; // e.g., "Arrival Time"
                        String order = parts[2]; // e.g., "Ascending"
                        app.sortTable(sortBy, order); // Apply the sorting
                    }
                }
            }
        });
 
        // Create a panel to center the search bar and sort dropdown
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        searchPanel.add(searchBar);
        searchPanel.add(sortDropdown);
        panel.add(searchPanel, BorderLayout.NORTH);
 
        // Create buttons
        JButton addButton = new JButton("Add Schedule");
        JButton deleteButton = new JButton("Delete Schedule");
        JButton editButton = new JButton("Edit Schedule");
        JButton nextButton = new JButton("Next");
        JButton previousButton = new JButton("Previous");
        JButton detailsButton = new JButton("View Train Details");
 
        // Create a panel for the buttons
        JPanel buttonPanel = new JPanel(new GridLayout(2, 3));
        buttonPanel.add(addButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(editButton);
        buttonPanel.add(nextButton);
        buttonPanel.add(previousButton);
        buttonPanel.add(detailsButton);
 
        // Add the button panel to the bottom of the main panel
        panel.add(buttonPanel, BorderLayout.SOUTH);
 
        // Add action listeners for buttons (same as before)
        addButton.addActionListener(e -> {
            // Show a dialog to input schedule details
            String arrivals = (String) JOptionPane.showInputDialog(frame, "Select Arrivals:", "Add Schedule",
                    JOptionPane.PLAIN_MESSAGE, null, MRT3Stations.STATIONS, MRT3Stations.STATIONS[0]);
 
            String departures = (String) JOptionPane.showInputDialog(frame, "Select Departures:", "Add Schedule",
                    JOptionPane.PLAIN_MESSAGE, null, MRT3Stations.STATIONS, MRT3Stations.STATIONS[0]);
 
            String trainId = JOptionPane.showInputDialog(frame, "Enter Train ID:");
 
            while (trainId == null || trainId.trim().isEmpty()) {
                if (trainId == null) {
                    // If the user pressed Cancel, break out of the loop
                    return; // Exit the method or handle the cancel case appropriately
                }
                JOptionPane.showMessageDialog(frame, "Train ID cannot be empty. Please enter a valid Train ID.", 
                                              "Invalid Input", JOptionPane.ERROR_MESSAGE);
                trainId = JOptionPane.showInputDialog(frame, "Enter Train ID:");
            }
 
            String arrivalTime = app.getValidatedTimeInput(frame, null); // Validate arrival time
            String departureTime = app.getValidatedTimeInput(frame, null); // Validate departure time
            String remarks = JOptionPane.showInputDialog(frame, "Enter Remarks:");
 
            if (arrivals != null && departures != null && trainId != null && arrivalTime != null && departureTime != null) {
                app.saveDataToDatabase(arrivals, departures, trainId, arrivalTime, departureTime, remarks);
                app.loadDataFromDatabase(); // Refresh the table
            }
        });
 
        deleteButton.addActionListener(e -> {
            int selectedRow = app.table.getSelectedRow();
            if (selectedRow >= 0) {
                int id = (int) app.tableModel.getValueAt(selectedRow, 0); // Get the ID column value
                app.deleteDataFromDatabase(id);
                app.loadDataFromDatabase(); // Refresh the table
            } else {
                JOptionPane.showMessageDialog(frame, "Please select a row to delete.", "Error Deleting Schedule", JOptionPane.ERROR_MESSAGE);
            }
        });
 
        editButton.addActionListener(e -> {
            int selectedRow = app.table.getSelectedRow();
            if (selectedRow >= 0) {
                // Get the current values from the selected row
                String currentArrivals = (String) app.tableModel.getValueAt(selectedRow, 0); // Arrivals
                String currentDepartures = (String) app.tableModel.getValueAt(selectedRow, 1); // Departures
                String currentTrainId = (String) app.tableModel.getValueAt(selectedRow, 2); // Train ID
                String currentArrivalTime = (String) app.tableModel.getValueAt(selectedRow, 3); // Arrival Time
                String currentDepartureTime = (String) app.tableModel.getValueAt(selectedRow, 4); // Departure Time
                String currentRemarks = (String) app.tableModel.getValueAt(selectedRow, 5); // Remarks
 
                // Prompt the user to edit values
                String newArrivals = (String) JOptionPane.showInputDialog(frame, "Edit Arrivals:", "Edit Schedule",
                        JOptionPane.PLAIN_MESSAGE, null, MRT3Stations.STATIONS, currentArrivals);
                String newDepartures = (String) JOptionPane.showInputDialog(frame, "Edit Departures:", "Edit Schedule",
                        JOptionPane.PLAIN_MESSAGE, null, MRT3Stations.STATIONS, currentDepartures);
                String newTrainId = JOptionPane.showInputDialog(frame, "Edit Train ID:", currentTrainId);
 
                while (newTrainId == null || newTrainId.trim().isEmpty()) {
                    if (newTrainId == null) {
                        // If the user pressed Cancel, break out of the loop
                        return; // Exit the method or handle the cancel case appropriately
                    }
                    JOptionPane.showMessageDialog(frame, "Train ID cannot be empty. Please enter a valid Train ID.", 
                                                  "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    newTrainId = JOptionPane.showInputDialog(frame, "Enter Train ID:");
                }
 
                String newArrivalTime = app.getValidatedTimeInput(frame, currentArrivalTime); // Validate new arrival time
                String newDepartureTime = app.getValidatedTimeInput(frame, currentDepartureTime); // Validate new departure time
                String newRemarks = JOptionPane.showInputDialog(frame, "Edit Remarks:", currentRemarks);
 
                // Validate input and update the database
                if (newArrivals != null && newDepartures != null && newTrainId != null && newArrivalTime != null && newDepartureTime != null) {
                    int id = (int) app.tableModel.getValueAt(selectedRow, 0); // Assuming ID is in the first column
                    app.updateDataInDatabase(id, newArrivals, newDepartures, newTrainId, newArrivalTime, newDepartureTime, newRemarks);
                    app.loadDataFromDatabase(); // Refresh the table
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Please select a row to edit.", "Error Editing Schedule", JOptionPane.ERROR_MESSAGE); 
            }
        });
 
        nextButton.addActionListener(e -> {
            if (app.currentIndex < app.tableModel.getRowCount() - 1) {
                app.currentIndex++;
                app.table.setRowSelectionInterval(app.currentIndex, app.currentIndex);
            }
        });
 
        previousButton.addActionListener(e -> {
            if (app.currentIndex > 0) {
                app.currentIndex--;
                app.table.setRowSelectionInterval(app.currentIndex, app.currentIndex);
            }
        });
 
        detailsButton.addActionListener(e -> {
            int selectedRow = app.table.getSelectedRow();
            if (selectedRow >= 0) {
                String details = "Train ID: " + app.tableModel.getValueAt(selectedRow, 2) + "\n"
                              + "Arrivals: " + app.tableModel.getValueAt(selectedRow, 0) + "\n"
                              + "Departures: " + app.tableModel.getValueAt(selectedRow, 1) + "\n"
                              + "Arrival Time: " + app.tableModel.getValueAt(selectedRow, 3) + "\n"
                              + "Departure Time: " + app.tableModel.getValueAt(selectedRow, 4) + "\n"
                              + "Remarks: " + app.tableModel.getValueAt(selectedRow, 5);
                JOptionPane.showMessageDialog(frame, details, "Train Details", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(frame, "Please select a row to view details.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
 
        // Make the frame visible
        frame.setVisible(true);
        app.table.requestFocusInWindow();
    }
}
 
// Class to store MRT-3 station names
class MRT3Stations {
    public static final String[] STATIONS = {
        "North Avenue",
        "Quezon Avenue",
        "GMA Kamuning",
        "Araneta Center-Cubao",
        "Santolan-Annapolis",
        "Ortigas",
        "Shaw Boulevard",
        "Boni",
        "Guadalupe",
        "Buendia",
        "Ayala",
        "Magallanes",
        "Taft Avenue"
    };
}